name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on: push

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: langchain-genezio-distributions
        path: dist/

  check-version:
    name: Check if version has been incremented
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
    - name: Check if pyproject.toml exists
      run: ls -la
      working-directory: ./
    - name: Install toml
      run: python3 -m pip install toml
      working-directory: ./
    - name: Get version from pyproject.toml
      id: version_check
      run: |
        version=$(python3 -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
        
        pypi_last_version=$(curl -s https://pypi.org/pypi/langchain-genezio/json | jq -r '.info.version')
        
        testpypi_last_version=$(curl -s https://test.pypi.org/pypi/langchain-genezio/json | jq -r '.info.version')
        
        echo "Current version: $version"
        echo "Last published version on PyPI: $pypi_last_version"
        echo "Last published version on TestPyPI: $testpypi_last_version"
        
        if [ "$version" == "$pypi_last_version" ] || [ "$version" == "$testpypi_last_version" ]; then
          echo "Version has not been incremented. Skipping publish."
          echo "version_changed=false" >> $GITHUB_ENV
        else
          echo "Version has been incremented. Proceeding with publish."
          echo "version_changed=true" >> $GITHUB_ENV
        fi

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: needs.check-version.outputs.version_changed == 'true' && startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes and version change
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/langchain-genezio
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: langchain-genezio-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: needs.check-version.outputs.version_changed == 'true'  # only publish to TestPyPI if version has changed
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/langchain-genezio

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: langchain-genezio-distributions
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: langchain-genezio-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"
